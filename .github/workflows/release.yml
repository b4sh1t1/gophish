name: Build Gophish Release
on:
    release:
        types: [created]

jobs:
    build:
        name: Build Binary
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [windows-latest, ubuntu-latest, macos-latest]
                arch: ['386', amd64]
                include:
                    - os: windows-latest
                      goos: windows
                      bin: 'gophish.exe'
                      releaseos: windows
                    - os: ubuntu-latest
                      goos: linux
                      bin: 'gophish'
                      releaseos: linux
                    - os: macos-latest
                      goos: darwin
                      bin: 'gophish'
                      releaseos: osx
                # Don't build windows-32bit due to missing MinGW dependencies
                # Don't build osx-32bit due to eventual drop in Go support
                exclude:
                    - os: windows-latest
                      arch: '386'
                    - os: macos-latest
                      arch: '386'
        steps:
            - name: Set up Go
              uses: actions/setup-go@v2
              with:
                go-version: 1.14
            - run: go version
            - if: matrix.os == 'ubuntu-latest'
              run: sudo apt-get update && sudo apt-get install -y gcc-multilib
            - if: matrix.arch == '386'
              run: echo "::set-env name=RELEASE::gophish-${{ github.event.release.tag_name }}-${{ matrix.releaseos}}-32bit"
            - if: matrix.arch == 'amd64'
              run: echo "::set-env name=RELEASE::gophish-${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-64bit"
            - uses: actions/checkout@v2
            - name: Build ${{ matrix.goos }}/${{ matrix.arch }}
              run: go build -o ${{ matrix.bin }}
              env:
                GOOS: ${{ matrix.goos }}
                GOARCH: ${{ matrix.arch }}
                CGO_ENABLED: 1
            - name: Upload to artifacts
              uses: actions/upload-artifact@v2
              with:
                name: ${{ env.RELEASE }}
                path: ${{ matrix.bin }}


    package:
        name: Package Assets
        runs-on: ubuntu-latest
        needs: build
        steps:
            - uses: actions/checkout@v2
            - uses: actions/download-artifact@v2
              with:
                path: bin
            - name: Copy assets into releases
              run: |
                for RELEASE in bin/*
                do
                  cd $RELEASE
                  mkdir -p static/js/dist && cp -R ../../static/js/dist static/js/dist
                  mkdir -p static/js/src/vendor && cp -R ../../static/js/src/vendor/ckeditor static/js/src/vendor/ckeditor
                  mkdir -p static/css/dist && cp -R ../../static/css/dist static/css/dist
                  mkdir -p static/images && cp -R ../../static/images static/images
                  mkdir -p static/font && cp -R ../../static/font static/font
                  mkdir -p static/db && cp -R ../../static/db static/db
                  mkdir -p db && cp -R ../../db db
                  mkdir -p templates && cp -R ../../templates templates
                  cp ../../README.md .
                  cp ../../VERSION .
                  cp ../../LICENSE .
                  cp ../../config.json .
                  cd ../../
                done
            - name: Archive Releases
              run: |
                for RELEASE in bin/*
                do
                  zip -r $RELEASE.zip *
                done
            - name: Upload to artifacts
              uses: actions/upload-artifact@v2
              with:
                name: releases
                path: bin/*.zip
    
    # upload:
    #     name: Upload to the Release
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/download-artifact@v2
    #           with:
    #             # Check on this
    #             path: releases/
